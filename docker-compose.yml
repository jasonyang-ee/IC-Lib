version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18-alpine
    container_name: allegro-postgres
    environment:
      POSTGRES_USER: sami
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: cip
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - allegro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sami -d cip"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: allegro-backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=sami
      - DB_PASSWORD=123456
      - DB_NAME=cip
      - CORS_ORIGIN=http://localhost:5173
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - allegro-network
    volumes:
      - ./server:/app
      - /app/node_modules
      - footprint_downloads:/app/downloads/footprints
    restart: unless-stopped

  # Frontend (for production build)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: allegro-frontend
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - allegro-network
    restart: unless-stopped

networks:
  allegro-network:
    driver: bridge

volumes:
  postgres_data:
  footprint_downloads:
