┌─────────────────────────────────────────────────────────────┐
│                                                             │
│  🚀 DOCKER DEPLOYMENT - QUICK REFERENCE                    │
│                                                             │
│  Allegro Component Library - Unified Container             │
│                                                             │
└─────────────────────────────────────────────────────────────┘

📦 ARCHITECTURE
┌──────────────────────────────────────┐
│     Single Container (allegro-web)   │
│  ┌──────────┐    ┌────────────────┐  │
│  │  Nginx   │───▶│   Express.js   │  │
│  │  :80     │    │     :3001      │  │
│  └──────────┘    └────────────────┘  │
│       │                   │           │
│   Frontend            Backend         │
└───────┼───────────────────┼───────────┘
        │                   │
        └─────────┬─────────┘
                  ▼
      PostgreSQL (External)
    infra.main.local:5435

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 DEPLOYMENT STEPS

1. Initialize Database (One-time)
   $ cd scripts && npm run init-db

2. Configure Connection
   Edit docker-compose.yml:
   - DB_HOST=infra.main.local
   - DB_PORT=5435
   - DB_USER=sami
   - DB_PASSWORD=123456
   - DB_NAME=cip

3. Build & Start
   $ docker-compose up -d

4. Verify
   $ docker-compose logs -f web

5. Access
   Frontend: http://localhost
   API:      http://localhost/api
   Health:   http://localhost/health

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 COMMON COMMANDS

Start
  $ docker-compose up -d

Stop
  $ docker-compose down

Restart
  $ docker-compose restart web

View Logs
  $ docker-compose logs -f web

Rebuild
  $ docker-compose up -d --build

Check Status
  $ docker ps | grep allegro

Health Check
  $ curl http://localhost/health

Shell Access
  $ docker exec -it allegro-web sh

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔧 TROUBLESHOOTING

Port 80 Already in Use
  Edit docker-compose.yml:
  ports:
    - "8080:80"  # Use different port

Database Connection Failed
  1. Check PostgreSQL is running:
     $ psql -h infra.main.local -p 5435 -U sami -d cip
  2. Check network connectivity:
     $ ping infra.main.local
  3. Verify environment variables in docker-compose.yml

Container Exits Immediately
  $ docker-compose logs web
  Look for startup errors

Frontend Shows 404
  $ docker exec allegro-web ls /usr/share/nginx/html/
  If empty, rebuild:
  $ docker-compose build --no-cache

API Errors
  $ curl http://localhost:3001/health
  $ docker exec allegro-web ps aux | grep node

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📂 FILES OVERVIEW

Dockerfile
  Multi-stage build
  Stage 1: Build React frontend
  Stage 2: Setup Node.js + nginx + backend

startup.sh
  Starts nginx and Express in parallel
  Tests database connection
  Monitors both processes

nginx.conf
  Serves React app from /
  Proxies /api to Express
  Gzip compression
  Static asset caching

docker-compose.yml
  Single 'web' service
  Environment variables for database
  Volume for footprint downloads
  Health checks

.dockerignore
  Excludes dev files from build
  Reduces image size

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🌐 PORTS

80    Frontend (nginx) - http://localhost
3001  Backend API - http://localhost:3001 (optional)

Note: Backend accessible via nginx at /api
      So port 3001 can be removed from docker-compose.yml

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔐 ENVIRONMENT VARIABLES

Required:
  DB_HOST      PostgreSQL hostname
  DB_PORT      PostgreSQL port
  DB_USER      Database username
  DB_PASSWORD  Database password
  DB_NAME      Database name

Optional:
  NODE_ENV                production
  PORT                    3001
  CORS_ORIGIN            *
  DIGIKEY_CLIENT_ID      For vendor search
  DIGIKEY_CLIENT_SECRET  For vendor search
  MOUSER_API_KEY         For vendor search
  ULTRA_LIBRARIAN_TOKEN  For footprints
  SNAPEDA_API_KEY        For footprints

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💾 VOLUMES

footprint_downloads
  Persists downloaded footprint files
  Location: /app/downloads/footprints

Backup:
  $ docker run --rm \
    -v allegroSQL_footprint_downloads:/data \
    -v $(pwd):/backup \
    alpine tar czf /backup/footprints.tar.gz /data

Restore:
  $ docker run --rm \
    -v allegroSQL_footprint_downloads:/data \
    -v $(pwd):/backup \
    alpine tar xzf /backup/footprints.tar.gz -C /

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 MONITORING

Container Stats:
  $ docker stats allegro-web

Process List:
  $ docker exec allegro-web ps aux

Live Logs:
  $ docker-compose logs -f web

Health Status:
  $ docker inspect allegro-web | grep -A 10 Health

Disk Usage:
  $ docker system df

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔄 UPDATE PROCEDURE

1. Pull latest code:
   $ git pull

2. Stop current version:
   $ docker-compose down

3. Rebuild with no cache:
   $ docker-compose build --no-cache

4. Start new version:
   $ docker-compose up -d

5. Verify deployment:
   $ docker-compose logs -f web
   $ curl http://localhost/health

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ BENEFITS OF UNIFIED DEPLOYMENT

Before: 3 containers (frontend, backend, postgres)
After:  1 container (frontend + backend) + external DB

✓ Simpler management
✓ Faster API requests (localhost vs network)
✓ Reduced resource usage
✓ Easier scaling
✓ Single point of monitoring
✓ No service orchestration needed
✓ Works with existing PostgreSQL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 DOCUMENTATION

DOCKER_DEPLOYMENT.md     Detailed deployment guide
DOCKER_UPDATE_COMPLETE.md Complete changelog
README.md                Project overview
QUICKSTART.md            Quick start guide
DATABASE_SETUP.md        Database initialization
API.md                   API documentation

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 QUICK TEST

After deployment, verify everything works:

$ curl -I http://localhost/
HTTP/1.1 200 OK

$ curl http://localhost/api/health
{"status":"healthy","timestamp":"..."}

$ curl http://localhost/api/categories
[{"id":"...","name":"Resistor",...},...]

Open browser to http://localhost
✓ Dashboard shows statistics
✓ Library shows components
✓ All pages load correctly

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 PRO TIPS

1. Remove port 3001 mapping if you only need nginx access
2. Use Traefik/Caddy for automatic HTTPS
3. Enable Docker secrets for production passwords
4. Run as non-root user in production
5. Set up log rotation for container logs
6. Monitor with Prometheus/Grafana
7. Use health checks for auto-restart
8. Backup footprint_downloads volume regularly

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🚀 READY TO DEPLOY!

Your unified Docker deployment is configured and ready.
Simply run: docker-compose up -d

Questions? See DOCKER_DEPLOYMENT.md for detailed guide.
