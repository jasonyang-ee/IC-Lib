┌─────────────────────────────────────────────────────────────┐
│                                                             │
│  🎯 INITIALIZE YOUR DATABASE - STEP BY STEP                │
│                                                             │
└─────────────────────────────────────────────────────────────┘

Your PostgreSQL Server:
┌────────────────────────────┐
│ Host: infra.main.local     │
│ Port: 5435                 │
│ User: sami                 │
│ Pass: 123456               │
│ DB:   cip (blank)          │
└────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ STEP 1: Initialize Database                                 │
└─────────────────────────────────────────────────────────────┘

Open terminal and run:

  cd f:/DevSQL/allegroSQL/scripts
  npm run init-db

The script will:
  1. ✓ Test connection to your PostgreSQL server
  2. ✓ Check if database is blank
  3. ✓ Create all tables, indexes, triggers
  4. ✓ Ask if you want sample data (recommended: yes)
  5. ✓ Verify installation

Expected output:
  ==================================
  Allegro Component Library
  Database Initialization Script
  ==================================
  
  ✓ Database connection successful
  ✓ Schema initialized successfully
  
  Tables created:
    ✓ component_categories
    ✓ components
    ✓ component_specifications
    ✓ distributors
    ✓ distributor_info
    ✓ footprint_sources
    ✓ inventory
    ✓ manufacturers
  
  Do you want to load sample data? (yes/no): yes
  
  ✓ Sample data loaded successfully
  
  Record counts:
    Components: 15
    Categories: 8
    Manufacturers: 10
    Inventory Items: 6
  
  ==================================
  Database initialization complete!
  ==================================

┌─────────────────────────────────────────────────────────────┐
│ STEP 2: Start Backend Server                                │
└─────────────────────────────────────────────────────────────┘

Open a NEW terminal and run:

  cd f:/DevSQL/allegroSQL/server
  npm run dev

Expected output:
  🚀 Server running on port 3001
  📝 Environment: development
  🔗 API: http://localhost:3001/api
  Connected to PostgreSQL database

Keep this terminal running!

┌─────────────────────────────────────────────────────────────┐
│ STEP 3: Start Frontend                                      │
└─────────────────────────────────────────────────────────────┘

Open ANOTHER terminal and run:

  cd f:/DevSQL/allegroSQL/client
  npm run dev

Expected output:
  VITE v7.1.9  ready in 559 ms
  
  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose
  ➜  press h + enter to show help

Keep this terminal running too!

┌─────────────────────────────────────────────────────────────┐
│ STEP 4: Open Browser                                        │
└─────────────────────────────────────────────────────────────┘

Open your web browser and go to:

  http://localhost:5173

You should see:
  ┌──────────────────────────┐
  │ Allegro Component Library│
  │ ─────────────────────────│
  │ □ Dashboard              │
  │ □ Library                │
  │ □ Inventory              │
  │ □ Vendor Search          │
  │ □ Reports                │
  └──────────────────────────┘

Dashboard will show:
  • Total Components: 15
  • Categories: 8
  • Inventory Items: 6
  • And more statistics!

┌─────────────────────────────────────────────────────────────┐
│ ✅ DONE! Your system is running!                            │
└─────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────┐
│ WHAT YOU HAVE NOW                                           │
└─────────────────────────────────────────────────────────────┘

Database (PostgreSQL at infra.main.local:5435)
  └─ cip database
      ├─ 10+ tables created
      ├─ Sample data loaded
      ├─ Indexes optimized
      └─ Triggers active

Backend (http://localhost:3001)
  └─ Express.js API
      ├─ 40+ endpoints
      ├─ Connected to database
      └─ Ready for requests

Frontend (http://localhost:5173)
  └─ React + Vite app
      ├─ Dashboard page
      ├─ Library browser
      ├─ Inventory tracker
      ├─ Vendor search
      └─ Reports generator

┌─────────────────────────────────────────────────────────────┐
│ QUICK TEST                                                  │
└─────────────────────────────────────────────────────────────┘

Try these in your browser:

1. View Dashboard
   → Click "Dashboard" in sidebar
   → See statistics and charts

2. Browse Library
   → Click "Library" in sidebar
   → See sample components
   → Try searching for "resistor"

3. Check Inventory
   → Click "Inventory" in sidebar
   → See stock levels
   → Notice low stock alerts (red)

4. Try Reports
   → Click "Reports" in sidebar
   → Select "Component Summary"
   → See category breakdown

┌─────────────────────────────────────────────────────────────┐
│ TROUBLESHOOTING                                             │
└─────────────────────────────────────────────────────────────┘

Problem: Can't connect to database
Solution: 
  1. Check if PostgreSQL is running
  2. Verify network can reach infra.main.local
  3. Check firewall allows port 5435
  4. Test: psql -h infra.main.local -p 5435 -U sami -d cip

Problem: Backend won't start
Solution:
  1. Check database initialized successfully
  2. Verify .env in server folder
  3. Check port 3001 is available

Problem: Frontend shows errors
Solution:
  1. Check backend is running on port 3001
  2. Check browser console for errors
  3. Try refreshing page

Problem: "psql not found" error
Solution:
  Use Node.js script instead (doesn't need psql):
  cd scripts
  npm run init-db

┌─────────────────────────────────────────────────────────────┐
│ NEXT STEPS                                                  │
└─────────────────────────────────────────────────────────────┘

Now that everything is running:

□ Add your own components
  → Use "Vendor Search" to find parts
  → Click "Add to Library"

□ Configure API keys (optional)
  → Edit server/.env
  → Add Digikey, Mouser keys
  → Restart backend

□ Customize categories
  → Add your specific component types
  → Use API or direct database

□ Set up inventory
  → Track your actual stock
  → Set minimum quantities
  → Get low stock alerts

┌─────────────────────────────────────────────────────────────┐
│ HELPFUL COMMANDS                                            │
└─────────────────────────────────────────────────────────────┘

Stop everything:
  Ctrl+C in each terminal

Restart database initialization:
  cd scripts
  npm run reset-db    # Warning: deletes all data!
  npm run init-db

Check database contents:
  psql -h infra.main.local -p 5435 -U sami -d cip
  \dt                 # List tables
  SELECT COUNT(*) FROM components;
  \q                  # Quit

View logs:
  Backend logs: Check terminal running "npm run dev"
  Frontend logs: Check browser console (F12)

┌─────────────────────────────────────────────────────────────┐
│ DOCUMENTATION                                               │
└─────────────────────────────────────────────────────────────┘

  README.md             - Main documentation
  DATABASE_SETUP.md     - Quick setup guide for your database
  QUICKSTART.md         - Fast startup instructions
  API.md                - All API endpoints
  scripts/README.md     - Detailed script documentation
  SCRIPTS_COMPLETE.md   - This setup summary

┌─────────────────────────────────────────────────────────────┐
│ 🎉 READY TO GO!                                             │
└─────────────────────────────────────────────────────────────┘

Your Allegro Component Library Management System is fully
operational and ready to manage your IC component library!

Start by running:
  cd scripts && npm run init-db

Happy component organizing! 🚀
